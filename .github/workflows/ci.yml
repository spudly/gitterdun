name: CI

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-build
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-build.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-test
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-test.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Run tests
        env:
          CI: true
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: |
            ./coverage/lcov.info
            ./packages/*/coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-lint
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-lint.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Run linting
        run: npm run lint

  prettier:
    name: Prettier
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-prettier
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-prettier.outputs.cache-hit != 'true'
        run: npm ci

      - name: Prettier Check
        run: npm run check:prettier

  knip:
    name: Knip
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-knip
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-knip.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Check dependencies
        run: npm run knip

  ts-coverage:
    name: TS Coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-ts-coverage
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-ts-coverage.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: TypeScript coverage report
        run: npm run check:ts:coverage

  jscpd:
    name: JSCPD
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-jscpd
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-jscpd.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run JSCPD
        run: npm run check:jscpd

  e2e:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: giterdone_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d giterdone_test"
          --health-interval=10s --health-timeout=5s --health-retries=12
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0

      - name: Restore node_modules cache
        id: cache-node-modules-e2e
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key:
            ${{ runner.os }}-node_modules-${{ github.sha }}-${{
            hashFiles('package-lock.json') }}

      - name: Install dependencies (cache miss)
        if: steps.cache-node-modules-e2e.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/*/src/i18n/extracted
            packages/*/tsconfig.build.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install Playwright browsers
        run: npm run ci:install:browsers

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres -d giterdone_test; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres did not become ready in time" >&2
          exit 1

      - name: Reset database
        env:
          PG_URL: postgresql://postgres:postgres@localhost:5432/giterdone_test
        run: npm run db:reset

      - name: Debug system info
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Available memory: $(free -h)"
          echo "CPU info: $(nproc) cores"

      - name: Run E2E tests
        env:
          CI: true
          DEBUG: pw:webserver
          PG_URL: postgresql://postgres:postgres@localhost:5432/giterdone_test
        run: npm test --workspace=packages/e2e
